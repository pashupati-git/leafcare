import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:google_fonts/google_fonts.dart';
import 'description_page.dart';
import 'home.dart';

class FavouritePage extends StatelessWidget {
  FavouritePage({super.key});

  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<bool> isCartEmpty(String userId) async {
    final cartSnapshot = await _firestore
        .collection('users')
        .doc(userId)
        .collection('cart')
        .get();
    return cartSnapshot.docs.isEmpty;
  }

  Future<void> addToCart(String userId, String productId, Map<String, dynamic> productData) async {
    final cartRef = _firestore.collection('users').doc(userId).collection('cart');
    await cartRef.doc(productId).set({
      ...productData,
      'quantity': 1, // default quantity
    });
  }

  @override
  Widget build(BuildContext context) {
    final user = _auth.currentUser;

    if (user == null) {
      return Scaffold(
        appBar: AppBar(title: const Text("Favourites")),
        body: const Center(child: Text("Please log in to view favorites")),
      );
    }

    final favRef = _firestore
        .collection('users')
        .doc(user.uid)
        .collection('favorites');

    return Scaffold(
      backgroundColor: const Color(0xFFF7F7F7),
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios, color: Colors.black),
          onPressed: () {
            Navigator.of(context).pushReplacement(
              MaterialPageRoute(builder: (context) => Home()),
            );
          },
        ),
        title: const Text('Favourites', style: TextStyle(color: Colors.black)),
        centerTitle: true,
      ),
      body: StreamBuilder<QuerySnapshot>(
        stream: favRef.snapshots(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
            return Center(
              child: Text(
                "No favourite items yet!",
                style: GoogleFonts.poppins(fontSize: 18, color: Colors.grey),
              ),
            );
          }

          final docs = snapshot.data!.docs;

          return ListView.separated(
            padding: const EdgeInsets.all(16),
            itemCount: docs.length,
            separatorBuilder: (_, __) => const SizedBox(height: 16),
            itemBuilder: (context, index) {
              final doc = docs[index];
              final item = doc.data()! as Map<String, dynamic>;

              double price = 0;
              if (item['price'] is int) {
                price = (item['price'] as int).toDouble();
              } else if (item['price'] is double) {
                price = item['price'];
              } else if (item['price'] is String) {
                price = double.tryParse(item['price']) ?? 0;
              }

              return Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.shade300,
                      spreadRadius: 1,
                      blurRadius: 8,
                    ),
                  ],
                ),
                child: Row(
                  children: [
                    Builder(builder: (_) {
                      final imageUrl = (item['image'] ?? '').toString().trim();
                      final validImageUrl = (imageUrl.isNotEmpty &&
                          Uri.tryParse(imageUrl)?.hasAbsolutePath == true)
                          ? imageUrl
                          : 'https://via.placeholder.com/80';

                      return Image.network(
                        validImageUrl,
                        height: 80,
                        width: 80,
                        fit: BoxFit.contain,
                        errorBuilder: (context, error, stackTrace) {
                          return Image.network(
                            'https://via.placeholder.com/80',
                            height: 80,
                            width: 80,
                            fit: BoxFit.contain,
                          );
                        },
                      );
                    }),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(item['name'] ?? '',
                              style: GoogleFonts.poppins(
                                  fontSize: 16, fontWeight: FontWeight.w600)),
                          const SizedBox(height: 4),
                          Text(
                            "Size: ${item['size'] ?? ''}, Color: ${item['color'] ?? ''}",
                            style: GoogleFonts.poppins(
                                fontSize: 12, color: Colors.grey),
                          ),
                          const SizedBox(height: 12),
                          Text(
                            "\$${price.toStringAsFixed(2)}",
                            style: GoogleFonts.poppins(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                              color: Colors.deepOrange,
                            ),
                          ),
                        ],
                      ),
                    ),
                    Column(
                      children: [
                        IconButton(
                          icon: const Icon(Icons.favorite, color: Colors.red),
                          onPressed: () async {
                            await favRef.doc(doc.id).delete();
                            Fluttertoast.showToast(msg: "Removed from favorites");
                          },
                        ),
                        ElevatedButton(
                          onPressed: () async {
                            bool empty = await isCartEmpty(user.uid);

                            if (empty) {
                              await addToCart(user.uid, doc.id, item);
                              Fluttertoast.showToast(msg: "Added to cart");
                            } else {
                              Fluttertoast.showToast(
                                  msg:
                                  "You already have an item in your cart. Remove it before adding another.");
                            }
                          },
                          child: const Text("Add to Cart"),
                        ),
                      ],
                    ),
                  ],
                ),
              );
            },
          );
        },
      ),
    );
  }
}
