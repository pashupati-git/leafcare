import 'package:flutter/material.dart';
import 'package:recipie_app/screens/recipe_detail-page.dart';
import '../components/text_field_widget.dart';
import '../constants/constant_function.dart';
import 'home.dart';

class SearchPage extends StatefulWidget {
  const SearchPage({super.key});

  @override
  State<SearchPage> createState() => _SearchPageState();
}

class _SearchPageState extends State<SearchPage> {
  String query = '';
  final List<String> categories = ['vegan', 'vegetarian', 'pasta', 'salad'];
  final Set<String> shownTitles = {};
  final List<Map<String, dynamic>> searchResults = [];

  Future<void> performSearch(String input) async {
    query = input.trim().toLowerCase(); // Ensure the input is lowercase.
    shownTitles.clear();
    searchResults.clear();

    if (query.isEmpty) {
      if (mounted) {
        setState(() {});
      }
      return;
    }

    for (String category in categories) {
      final data = await ConstantFunction.getResponse(category);

      if (data == null || data.isEmpty) continue;

      for (var item in data) {
        final title = (item['title'] ?? '').toString().toLowerCase(); // Convert title to lowercase.
        final ingredients = (item['ingredients'] as List<dynamic>?)
            ?.map((e) => (e['name'] ?? '').toString().toLowerCase())
            .join(' ') ??
            ''; // Convert ingredients to lowercase.

        // Check if title or ingredients contains the query (case-insensitive).
        if ((title.contains(query) || ingredients.contains(query)) &&
            !shownTitles.contains(title)) {
          shownTitles.add(title);
          searchResults.add(item);
        }
      }
    }

    // Ensure that the widget is still mounted before calling setState().
    if (mounted) {
      setState(() {});
    }
  }

  @override
  Widget build(BuildContext context) {
    final h = MediaQuery.of(context).size.height;
    final w = MediaQuery.of(context).size.width;

    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (_) => const Home()),
            );
          },
        ),
        title: const Text("Search"),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextFieldWidget(
              onChanged: (value) {
                performSearch(value);
              },
            ),
            const SizedBox(height: 20),
            if (query.isNotEmpty && searchResults.isEmpty)
              const Center(child: Text("No matching results.")),
            if (searchResults.isNotEmpty)
              Expanded(
                child: ListView.separated(
                  padding: const EdgeInsets.only(top: 10),
                  itemCount: searchResults.length,
                  separatorBuilder: (_, __) => const SizedBox(height: 20),
                  itemBuilder: (context, index) {
                    final item = searchResults[index];
                    final title = item['title'] ?? 'No title';
                    final imageUrl = (item['image_urls'] != null && item['image_urls'].isNotEmpty)
                        ? item['image_urls'][0]
                        : 'https://via.placeholder.com/150';
                    final time = item['totalTime']?.toInt() ?? 0;
                    final calories = item['nutrition']?['kcal']?.toInt() ?? 0;
                    final ratingValue = item['rating']?['ratingValue']?.toDouble() ?? 0.0;
                    final ratingCount = item['rating']?['ratingCount']?.toInt() ?? 0;

                    return GestureDetector(
                      onTap: () {
                        // Navigate to the RecipeDetailPage with the selected item
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => RecipeDetailPage(
                              title: title,
                              imageUrl: imageUrl,
                              time: time,
                              calories: calories,
                              ratingValue: ratingValue,
                              ratingCount: ratingCount,
                              ingredients: item['ingredients'] ?? [],
                            ),
                          ),
                        );
                      },
                      child: Container(
                        width: w,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(12),
                          color: Colors.white,
                          boxShadow: const [
                            BoxShadow(
                              color: Colors.black12,
                              blurRadius: 4,
                              offset: Offset(0, 2),
                            ),
                          ],
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            ClipRRect(
                              borderRadius: const BorderRadius.only(
                                topLeft: Radius.circular(12),
                                topRight: Radius.circular(12),
                              ),
                              child: Image.network(
                                imageUrl,
                                height: h * 0.2,
                                width: double.infinity,
                                fit: BoxFit.cover,
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.all(10.0),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(title,
                                      maxLines: 2,
                                      overflow: TextOverflow.ellipsis,
                                      style: const TextStyle(
                                        fontWeight: FontWeight.bold,
                                      )),
                                  const SizedBox(height: 5),
                                  Text("Time: ${time ~/ 60} min"),
                                  Text("Calories: $calories kcal"),
                                  Text("Rating: $ratingValue ($ratingCount)"),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
              ),
          ],
        ),
      ),
    );
  }
}
